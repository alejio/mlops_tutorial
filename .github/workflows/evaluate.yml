name: Evaluate candidate ML model in PR
on: [issue_comment]

jobs:
  evaluate:
    if: github.event.issue.pull_request != null &&  contains(github.event.comment.body, '/evaluate')
    runs-on: ubuntu-latest
    steps:
      - name: ChatOps For Pull Requests
        uses: machine-learning-apps/actions-chatops@1.41
        with:
          TRIGGER_PHRASE: "/evaluate"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: prcomm

      - name: Get PR number
        uses: actions/github-script@v3.0.0
        id: get-pr-number
        with:
          script: |
            const {data: pulls} = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: '${{ github.event.client_payload.ref }}'
            })
            return pulls[0].number
          result-encoding: string

      - name: Add evaluation-started label
        uses: actions-ecosystem/action-add-labels@v1.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: "evaluation-started"

      - name: Create training job kick off comment
        uses: peter-evans/create-or-update-comment@v1.4.2
        with:
          issue-number: ${{ steps.get-pr-number.outputs.result }}
          body: |
            I'm kicking off a training job tracked with the [MLflow remote server](${{ secrets.MLFLOW_TRACKING_URI }}).
      
        # This step clones the branch of the PR associated with the triggering phrase, but only if it is triggered.
      - name: Clone branch of PR
        if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'
        uses: actions/checkout@v2.3.2
        with:
          ref: ${{ steps.prcomm.outputs.SHA }}

        # Run mlflow train job
      - name: Run train job
        run: |
          docker build --build-arg MLFLOW_TRACKING_URI -f train.Dockerfile -t mlops_tutorial_train .
          docker run -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY mlops_tutorial_train
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MLFLOW_TRACKING_URI : ${{ secrets.MLFLOW_TRACKING_URI }}
        id: trainjob

      - name: Fetch live and production candidate MLflow runs
        uses: alejio/mlflow-tracking-action@v1.1.0
        id: fetch-runs
        with:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          EXPERIMENT_ID: ${{ steps.trainjob.outputs.EXPERIMENT_ID }}
          BASELINE_RUN_QUERY: "tags.live='1'"
          CANDIDATE_RUN_QUERY: "tags.production_candidate='1'"

#      - name: Set up Python v3.8.5
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.8.5'
#
#      - name: Set outputs
#        id: env-var-setter
#        run: |
#          pip install -r actions_requirements-cli.txt
#          echo "::set-output name=BUCKET_NAME::`python actions_set_env_variable_in_actions.py BUCKET_NAME`"
#          echo "::set-output name=EXPERIMENT_NAME::`python actions_set_env_variable_in_actions.py EXPERIMENT_NAME`"
#        env:
#          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI}}
#
#      - name: print output
#        run: |
#          echo ${{ steps.env-var-setter.outputs.EXPERIMENT_NAME }}
#          echo ${{ steps.env-var-setter.outputs.BUCKET_NAME }}

      # Let the bot respond
      - name: Create comment reporting results as a markdown table
        uses: peter-evans/create-or-update-comment@v1.4.2
        with:
          issue-number: ${{ steps.get-pr-number.outputs.result }}
          body: |
            |Model       |MLflow Run ID                                                                                                                                                                                          |S3 Artifact URI                                         |Training Accuracy                                        |Test Accuracy                                           |
            |------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------|---------------------------------------------------------|--------------------------------------------------------|
            |_Baseline_  |[${{ steps.fetch-runs.outputs.BASELINE_RUNID }}](${{ secrets.MLFLOW_TRACKING_URI }}/#/experiments/${{ steps.fetch-runs.outputs.EXPERIMENT_ID }}/runs/${{ steps.fetch-runs.outputs.BASELINE_RUNID }})   |${{ steps.fetch-runs.outputs.BASELINE_ARTIFACT_URI }}   |${{ steps.fetch-runs.outputs.BASELINE_TRAIN_ACCURACY }}  |${{ steps.fetch-runs.outputs.BASELINE_TEST_ACCURACY }}  |
            |_Candidate_ |[${{ steps.fetch-runs.outputs.CANDIDATE_RUNID }}](${{ secrets.MLFLOW_TRACKING_URI }}/#/experiments/${{ steps.fetch-runs.outputs.EXPERIMENT_ID }}/runs/${{ steps.fetch-runs.outputs.CANDIDATE_RUNID }}) |${{ steps.fetch-runs.outputs.CANDIDATE_ARTIFACT_URI }}  |${{ steps.fetch-runs.outputs.CANDIDATE_TRAIN_ACCURACY }} |${{ steps.fetch-runs.outputs.CANDIDATE_TEST_ACCURACY }} |
            
            #### Results queried from [MLflow Tracking Server](${{ secrets.MLFLOW_TRACKING_URI }}).
